<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="a7596b01-aec4-40d7-b44f-b611dd60ca33" name="Default Changelist" comment="" />
    <ignored path="$PROJECT_DIR$/out/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DefaultGradleProjectSettings">
    <option name="isMigrated" value="true" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="375">
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/core_async_lesson/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="400">
              <caret line="20" selection-start-line="20" selection-end-line="20" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/core.async/0.4.500/core.async-0.4.500.jar!/clojure/core/async.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="-185">
              <caret line="844" column="6" selection-start-line="844" selection-start-column="6" selection-end-line="844" selection-end-column="6" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/core.async/0.4.500/core.async-0.4.500.jar!/clojure/core/async/impl/ioc_macros.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="175">
              <caret line="972" selection-start-line="972" selection-end-line="972" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/core.async/0.1.346.0-17112a-alpha/core.async-0.1.346.0-17112a-alpha.jar!/clojure/core/async.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="487">
              <caret line="420" column="10" selection-start-line="420" selection-start-column="10" selection-end-line="420" selection-end-column="10" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>emp</find>
    </findStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/project.clj" />
        <option value="$PROJECT_DIR$/src/core_async_lesson/core.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="1764" />
    <option name="y" value="138" />
    <option name="width" value="1161" />
    <option name="height" value="741" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="Scope" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="core-async-lesson" type="b2602c69:ProjectViewProjectNode" />
              <item name="core-async-lesson" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="core-async-lesson" type="b2602c69:ProjectViewProjectNode" />
              <item name="core-async-lesson" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="core-async-lesson" type="b2602c69:ProjectViewProjectNode" />
              <item name="core-async-lesson" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="core_async_lesson" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/../EmailAws" />
  </component>
  <component name="ReplState" timestamp="1564677528650">{:repl-history {:ide [], :local [{:command &quot;(ns core-async-lesson.core\n  (:require [clojure.core.async :as a]))&quot;, :offset 67, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(ns core-async-lesson.core\n  (:require [clojure.core.async :as a\n             :refer [chan]]))&quot;, :offset 94, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(defn foo\n  \&quot;I don't do a whole lot.\&quot;\n  [x]\n  (println x \&quot;Hello, World!\&quot;))&quot;, :offset 74, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(def main-channel (chan))&quot;, :offset 25, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(defn -main [&amp; args]\n  (foo args))&quot;, :offset 34, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(ns core-async-lesson.core\n  (:require [clojure.core.async :as a\n             :refer [chan go &lt;! &gt;!]]))\n\n(defn foo\n  \&quot;I don't do a whole lot.\&quot;\n  [x]\n  (println x \&quot;Hello, World!\&quot;))\n\n\n(def main-channel (chan))\n\n\n(go (println (&lt;! main-channel)))\n\n(defn -main [&amp; args]\n  (foo args)\n  (&gt;! main-channel args))\n&quot;, :offset 304, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(-main \&quot;testing\&quot;)&quot;, :offset 17, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(ns core-async-lesson.core\n  (:require [clojure.core.async\n             :as a\n             :refer [&gt;! &lt;! &gt;!! &lt;!! go chan buffer close! thread\n                     alts! alts!! timeout]]))&quot;, :offset 187, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(ns core-async-lesson.core\n  (:require [clojure.core.async :as a :refer :all]))\n\n(defn foo\n  \&quot;I don't do a whole lot.\&quot;\n  [x]\n  (println x \&quot;Hello, World!\&quot;))\n\n\n(def main-channel (a/chan))\n\n\n(a/go (println (a/&lt;! main-channel)))\n\n(defn -main [&amp; args]\n  (foo args)\n  (go (a/&gt;! main-channel args)))\n\n(-main \&quot;testing\&quot;)\n&quot;, :offset 312, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(-main \&quot;testing\&quot; \&quot;farofa \&quot; 5555)&quot;, :offset 32, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(ns core-async-lesson.core\n  (:require [clojure.core.async :as a :refer :all]))\n\n(defn foo\n  \&quot;I don't do a whole lot.\&quot;\n  [x]\n  (println x \&quot;Hello, World!\&quot;))\n\n\n(def main-channel (a/chan))\n\n\n(a/go (println (a/&lt;! main-channel)))\n\n\n(a/go (println \&quot;other place\&quot; (a/&lt;! main-channel)))\n\n(defn -main [&amp; args]\n  (foo args)\n  (go (a/&gt;! main-channel args)))\n\n(-main \&quot;testing\&quot; \&quot;farofa \&quot; 5555)\n&quot;, :offset 380, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(ns core-async-lesson.core\n  (:require [clojure.core.async :as a :refer :all]))\n\n(defn foo\n  \&quot;I don't do a whole lot.\&quot;\n  [x]\n  (println x \&quot;Hello, World!\&quot;))\n\n\n(def main-channel (a/chan))\n\n(a/go (println \&quot;other place\&quot; (a/&lt;! main-channel)))\n\n(defn -main [&amp; args]\n  (foo args)\n  (go (a/&gt;! main-channel args)))\n\n(-main \&quot;testing\&quot; \&quot;farofa \&quot; 5555)\n&quot;, :offset 340, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(-&gt; (range 200)\n    (map #(go (&gt;! main-channel %))))&quot;, :offset 52, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(-&gt;&gt; (range 200)\n    (map #(go (&gt;! main-channel %))))&quot;, :offset 53, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(-&gt;&gt; (range 200)\n    (map (fn [x] (go (&gt;! main-channel x)))))&quot;, :offset 61, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(a/go (println \&quot;other place\&quot; (a/&lt;! main-channel)))&quot;, :offset 50, :ns &quot;core-async-lesson.core&quot;} {:command &quot;&lt;3&quot;, :offset 2, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(def main-channel (a/chan 10))&quot;, :offset 30, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(go (&gt;! main-channel \&quot;farofa\&quot;))&quot;, :offset 31, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(send-to-chan {:body \&quot;hello\&quot;})&quot;, :offset 30, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(send-to-chan {})&quot;, :offset 17, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(go-loop [state {:prev 0 :curr 0}]\n  (let [new-state {}]\n    (-&gt; new-state\n        (do (println \&quot;Previous state: \&quot; state)\n            (Thread/sleep 1000)\n            (assoc new-state :prev (:curr state)))\n        (assoc :curr (&lt;! main-channel))\n        (recur))))&quot;, :offset 263, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(send-to-chan \&quot;\&quot;)&quot;, :offset 17, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(go (doseq [n (range 10)]\n      (&gt;! main-channel n)))&quot;, :offset 53, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(defn send-to-chan [msg]\n  (go (&gt;! main-channel msg)))&quot;, :offset 54, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(doseq [x (range 100)]\n  (send-to-chan x))&quot;, :offset 42, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(go (doseq [x (range 100)]\n      (send-to-chan x)))&quot;, :offset 51, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(go-loop [state {:prev 0 :curr 0}]\n  (let [new-state {}]\n    (-&gt; new-state\n        (do (println \&quot;Previous state: \&quot; state)\n            (assoc new-state :prev (:curr state)))\n        (assoc :curr (&lt;! main-channel))\n        (recur))))&quot;, :offset 231, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(send-to-chan \&quot;testing\&quot;)&quot;, :offset 24, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(send-to-chan \&quot;furfle\&quot;)&quot;, :offset 23, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(go-loop [state {:prev 0 :curr 0}]\n  (let [new-state {}]\n    (as-&gt; new-state ns\n        (do (println \&quot;Previous state: \&quot; state)\n            (assoc ns :prev (:curr state)))\n        (assoc ns :curr (&lt;! main-channel))\n        (do (println \&quot;Current state: \&quot; ns))  \n        (recur ns))))&quot;, :offset 281, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(go-loop [state {:prev 0 :curr 0}]\n  (let [new-state {}]\n    (as-&gt; new-state ns\n          (assoc ns :prev (:curr state))\n          (assoc ns :curr (&lt;! main-channel))\n          (do (println \&quot;Current state: \&quot; ns) ns)\n          (recur ns))))&quot;, :offset 238, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(go (doseq [x (range 100)]\n      (&gt;! main-channel x)))&quot;, :offset 54, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(go (doseq [x (range 10)]\n      (&gt;! main-channel x)))&quot;, :offset 53, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(send-to-chan \&quot;farofa\&quot;)&quot;, :offset 23, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(send-to-chan (partial (+ 10)))&quot;, :offset 31, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(send-to-chan (fn [x] (+ x 10)))&quot;, :offset 32, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(go-loop [state {:value 0}]\n  (let [new-state {}]\n    (as-&gt; new-state ns\n          (assoc ns :value (apply (&lt;! main-channel) (:value state)))\n          (do (println \&quot;Current value: \&quot; ns) ns)\n          (recur ns))))&quot;, :offset 214, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(go (&gt;! main-channel (fn [x] (+ x 10))))&quot;, :offset 40, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(go (&gt;! main-channel 1))&quot;, :offset 24, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(go (&gt;! main-channel 4))&quot;, :offset 24, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(go (&gt;! main-channel (fn [x] (println x)\n                       (+ 1 x))))&quot;, :offset 74, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(take! main-channel #(println (type %)))&quot;, :offset 40, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(take! main-channel #(println %))&quot;, :offset 33, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(take! main-channel #(apply % 50))&quot;, :offset 34, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(go-loop [state {:value 0}]\n  (let [new-state {}]\n    (as-&gt; new-state ns\n          (println (&lt;! main-channel))\n          (recur ns))))&quot;, :offset 134, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(put! main-channel \&quot;test\&quot;)&quot;, :offset 26, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(go-loop [state {:value 0}]\n  (let [new-state {}]\n    (as-&gt; new-state ns\n          (apply (&lt;! main-channel) (:value state))\n          (recur ns))))&quot;, :offset 147, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(go-loop [state {:value 0}]\n  (let [new-state {}]\n    (as-&gt; new-state ns\n          (eval ((&lt;! main-channel) (:value state)))\n          (recur ns))))&quot;, :offset 148, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(go-loop [state {:value 0}]\n  (let [new-state {}]\n    (as-&gt; new-state ns\n          (let [new-val (eval ((&lt;! main-channel) (:value state)))]\n            (assoc ns :value new-val))\n          (recur ns))))&quot;, :offset 202, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(put! main-channel (fn [x] (println x)))&quot;, :offset 40, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(go-loop [state {:value 0}]\n  (let [new-state {}]\n    (as-&gt; new-state ns\n          (let [new-val (eval ((&lt;! main-channel) (:value state)))]\n            (assoc ns :value new-val))\n          (do (println ns) ns)\n          (recur ns))))&quot;, :offset 233, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(put! main-channel (fn [x] (+ 10 x)))&quot;, :offset 37, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(put! main-channel (fn [x] (- 10 x)))&quot;, :offset 37, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(put! main-channel (fn [x] 0))&quot;, :offset 30, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(put! main-channel (fn [x] (* 50)))&quot;, :offset 35, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(put! main-channel (fn [x] x))&quot;, :offset 30, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(put! main-channel (fn [x] 10))&quot;, :offset 31, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(put! main-channel (fn [x] (* 10)))&quot;, :offset 35, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(put! main-channel (fn [x]x))&quot;, :offset 29, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(put! main-channel (fn [x] (* 10 x)))&quot;, :offset 37, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(defn operate\n  \&quot;Sends a function to operate on channels current state,\n  as of: (operate #(+10 %))\&quot;\n  [fn]\n  (put! main-channel fn))&quot;, :offset 133, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(doc operate)&quot;, :offset 13, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(operate #(println %))&quot;, :offset 22, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(operate #(+ 1 %))&quot;, :offset 18, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(operate #(* 2.5  %))&quot;, :offset 21, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(operate #(* 5  %))&quot;, :offset 19, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(operate #(- 2  %))&quot;, :offset 19, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(operate #(+ 5 %))&quot;, :offset 18, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(operate #(- 15 %))&quot;, :offset 19, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(go-loop [state {:value 0}]\n  (let [new-state {}]\n    (as-&gt; new-state ns\n          (let [new-val (eval ((&lt;! main-channel) (:value state)))]\n            (println \&quot;new value: \&quot; new-val)\n            (assoc ns :value new-val))\n          (recur ns))))&quot;, :offset 246, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(operate! 8)&quot;, :offset 12, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(operate! #(+ 10 %))&quot;, :offset 20, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(operate! #(- % 3))&quot;, :offset 19, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(operate! #(* 7 %))&quot;, :offset 19, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(operate! \&quot;farofa\&quot;)&quot;, :offset 19, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(operate! #(\&quot;farofa\&quot;))&quot;, :offset 22, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(operate! #(\&quot;farofa\&quot;%))&quot;, :offset 23, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(operate! #(println %))&quot;, :offset 23, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(operate! 1)&quot;, :offset 12, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(ns core-async-lesson.core\n  (:require [clojure.core.async :as a :refer :all]))&quot;, :offset 79, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(def main-channel (a/chan))&quot;, :offset 27, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(go-loop [state {:value 0}]\n  (let [new-state {}]\n    (as-&gt; new-state ns\n          (let [new-val ((try\n                           (eval ((&lt;! main-channel) (:value state)))\n                           (catch Exception e\n                             (println e))))]\n            (println \&quot;new value: \&quot; new-val)\n            (assoc ns :value new-val))\n          (recur ns))))&quot;, :offset 369, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(defn operate!\n  \&quot;Sends a function to operate on channels current state,\n  as of: (operate #(+10 %))\&quot;\n  [fn]\n  (put! main-channel fn))&quot;, :offset 134, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(operate! 2)&quot;, :offset 12, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(operate! #( %))&quot;, :offset 16, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(operate! #( + 1 %))&quot;, :offset 20, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(ns core-async-lesson.core\n  (:require [clojure.core.async :as a :refer :all]))\n\n(def main-channel (a/chan))\n\n(go-loop [state {:value 0}]\n  (let [new-state {}]\n    (as-&gt; new-state ns\n          (let [new-val ((try\n                           (eval ((&lt;! main-channel) (:value state)))\n                           (catch Exception e\n                             (println e))))]\n            (println \&quot;new value: \&quot; new-val)\n            (assoc ns :value new-val))\n          (recur ns))))\n\n(defn operate!\n  \&quot;Sends a function to operate on channels current state,\n  as of: (operate #(+10 %))\&quot;\n  [fn]\n  (put! main-channel fn))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&quot;, :offset 635, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(operate! #(+ 2 %))&quot;, :offset 19, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(ns core-async-lesson.core\n  (:require [clojure.core.async :as a :refer :all]))\n\n(def main-channel (a/chan))\n\n(go-loop [state {:value 0}]\n  (let [new-state {}]\n    (as-&gt; new-state ns\n          (let [new-val (eval ((&lt;! main-channel) (:value state)))]\n            (println \&quot;new value: \&quot; new-val)\n            (assoc ns :value new-val))\n          (recur ns))))\n\n(defn operate!\n  \&quot;Sends a function to operate on channels current state,\n  as of: (operate #(+10 %))\&quot;\n  [fn]\n  (put! main-channel fn))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&quot;, :offset 509, :ns &quot;core-async-lesson.core&quot;} {:command &quot;(operate! #(+ 1 %))&quot;, :offset 19, :ns &quot;core-async-lesson.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.local-repl">
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <configuration name="local-repl" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="core-async-lesson" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration name="core-async-lesson.core" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="core-async-lesson" />
      <setting name="path" value="" />
      <setting name="namespace" value="core-async-lesson.core" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$" />
      <method v="2">
        <option name="Synchronize Leiningen" enabled="true" />
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <list>
      <item itemvalue="Clojure Application.core-async-lesson.core" />
      <item itemvalue="Clojure REPL.local-repl" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure Application.core-async-lesson.core" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration>$USER_HOME$/.subversion</configuration>
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="a7596b01-aec4-40d7-b44f-b611dd60ca33" name="Default Changelist" comment="" />
      <created>1564420413323</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1564420413323</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="1366" y="-2" width="1920" height="1082" extended-state="6" />
    <layout>
      <window_info content_ui="combo" id="Project" order="0" visible="true" weight="0.16899142" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="DB Browser" order="3" />
      <window_info id="Project Explorer" order="4" />
      <window_info id="Favorites" order="5" side_tool="true" />
      <window_info id="Job Explorer" order="6" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" weight="0.2811159" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.39914164" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="DB Execution Console" order="7" />
      <window_info anchor="bottom" id="SBT Console" order="8" />
      <window_info active="true" anchor="bottom" id="Terminal" order="9" visible="true" weight="0.38841203" />
      <window_info anchor="bottom" id="Docker" order="10" show_stripe_button="false" />
      <window_info anchor="bottom" id="Sequence" order="11" />
      <window_info anchor="bottom" id="Event Log" order="12" side_tool="true" />
      <window_info anchor="bottom" id="SBT Execute" order="13" side_tool="true" />
      <window_info anchor="bottom" id="Messages" order="14" />
      <window_info anchor="bottom" id="Console" order="15" />
      <window_info anchor="bottom" id="Version Control" order="16" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Maven" order="3" />
      <window_info anchor="right" id="Leiningen" order="4" />
      <window_info anchor="right" id="Palette&#9;" order="5" />
      <window_info anchor="right" id="Jenkins" order="6" />
      <window_info anchor="right" x="1975" y="236" width="701" height="616" id="REPL" order="7" side_tool="true" visible="true" weight="0.37231758" />
    </layout>
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/core_async_lesson/core.clj</url>
          <line>7</line>
          <properties />
          <option name="timeStamp" value="1" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/core_async_lesson/core.clj</url>
          <line>11</line>
          <properties />
          <option name="timeStamp" value="4" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="120">
          <caret line="6" column="51" selection-start-line="6" selection-start-column="51" selection-end-line="6" selection-end-column="51" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="194">
          <caret line="3215" column="10" selection-start-line="3215" selection-start-column="10" selection-end-line="3215" selection-end-column="10" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/core.async/0.1.346.0-17112a-alpha/core.async-0.1.346.0-17112a-alpha.jar!/clojure/core/async.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="487">
          <caret line="420" column="10" selection-start-line="420" selection-start-column="10" selection-end-line="420" selection-end-column="10" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/core.async/0.4.500/core.async-0.4.500.jar!/clojure/core/async/impl/ioc_macros.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="175">
          <caret line="972" selection-start-line="972" selection-end-line="972" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/core.async/0.4.500/core.async-0.4.500.jar!/clojure/core/async.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-185">
          <caret line="844" column="6" selection-start-line="844" selection-start-column="6" selection-end-line="844" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/core_async_lesson/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="400">
          <caret line="20" selection-start-line="20" selection-end-line="20" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>Kotlin SDK</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>